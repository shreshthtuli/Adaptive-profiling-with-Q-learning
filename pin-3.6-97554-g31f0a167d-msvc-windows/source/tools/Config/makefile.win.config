###### Common definitions ######

# In this section we place all the generic flags. Later sections provide
# additional flags depending on architecutre, compiler etc.

## General flags

# If we are testing Pin, add some internal checks. Don't do this by default
# since it may incur a performance penatly.
PIN_TESTFLAGS :=
ifeq ($(PIN_TESTING),1)
    PIN_TESTFLAGS += -slow_asserts
endif

## Output control

COMP_OBJ := /c /Fo
COMP_EXE := /Fe
LINK_EXE := /out:

## Special compilation/linkage directives

STATIC :=
NO_RANDOM := /DYNAMICBASE:NO
NO_ASLR :=
PIC :=
PIE :=
NO_PIE :=
SSE2 :=
FP387 :=
ASMCPP :=
NO_STDLIBS := /NODEFAULTLIB
EXPORT := /EXPORT:

# Flags to suppress errors when the linker has trouble solving relocations but they are still valid.
SUPPRESS_RELOCS :=

## Include paths

# COMPONENT_INCLUDES will be defined later in the directory structure section.
# APP_INCLUDES and TOOL_INCLUDES are internal utilities for this file.
APP_INCLUDES :=
TOOL_INCLUDES :=

## Library paths

APP_LPATHS :=
TOOL_LPATHS :=
SATOOL_LPATHS :=

## Libraries to link
TOOL_CRT_LIBS := stlport-static.lib m-static.lib c-static.lib os-apis.lib
BIONIC_ARCH := x86
ifneq ($(TARGET),ia32)
    BIONIC_ARCH := x86_64
endif

APP_LIBS :=
DL_LIB :=
APP_LIB_ATOMIC := atomic.lib
APP_LIB_XED := xed.lib
TOOL_LIBS := pin.lib xed.lib pinvm.lib $(TOOL_CRT_LIBS) ntdll-$(BITS).lib kernel32.lib
SATOOL_LIBS := $(NO_STDLIBS) $(subst os-apis.lib,os-apis-kernel32.lib,$(TOOL_CRT_LIBS)) ntdll-$(BITS).lib kernel32.lib

## Compiler flags

# Throughout this file, we only fill in the NOOPT versions of these variables.
# At the bottom of the file, the full versions are built from the NOOPT and
# the relevant optimization and debug flags (see below).
# e.g. APP_CXXFLAGS := $(APP_CXXFLAGS_NOOPT) $(APP_OPT_CXX) $(DBG_INFO_CXX)

APP_CXXFLAGS_NOOPT := /nologo /DTARGET_WINDOWS /DFUND_TC_HOSTOS=FUND_OS_WINDOWS \
                      /DFUND_TC_TARGETOS=FUND_OS_WINDOWS /MD /EHa /Gy-
ASM_FLAGS := /nologo /Cp

# /EHs- /EHa-	Disable exception handling in the tool, otherwise it could interfere in
#				the apllication's exception handling.
# /wd4530              Turn off the warning about not having /EHsc turned on
TOOL_CXXFLAGS_NOOPT := /MT /EHs- /EHa- /wd4530 /DTARGET_WINDOWS /nologo /Gy
DLL_CXXFLAGS :=
ENABLE_DEPRECATED := /DPIN_DEPRECATED_WARNINGS=0

WINDOWS_H_PATH ?= $(patsubst %\,%,$(strip $(shell cmd /c 'for %i in (Windows.h) do @echo.   %~dp$$INCLUDE:i')))
ifeq ($(ICC),1)
    WINDOWS_H_PATH := $(subst \,/,$(WINDOWS_H_PATH))
endif
export WINDOWS_H_PATH
TOOL_CXXFLAGS_NOOPT += /Oi- /GR- /GS- /D__PIN__=1 /DPIN_CRT=1 /D_WINDOWS_H_PATH_="$(WINDOWS_H_PATH)"
ifeq ($(TARGET),ia32)
    TOOL_CXXFLAGS_NOOPT += /D__i386__
else
    TOOL_CXXFLAGS_NOOPT += /D__LP64__
endif

## Linker flags

# Throughout this file, we only fill in the NOOPT versions of these variables.
# At the bottom of the file, the full versions are built from the NOOPT and
# the relevant optimization and debug flags (see below).
# e.g. TOOL_LDFLAGS := $(TOOL_LDFLAGS_NOOPT) $(TOOL_OPT_LD) $(DBG_INFO_LD)

APP_LDFLAGS_NOOPT := /link /NOLOGO /INCREMENTAL:NO
# /EXPORT:main	Main function of the tool has to be exported.
# /NODEFAULTLIB	Do not link and use any system library except for those listed explicitly
#				to avoid conflicts with an application using the same library.
TOOL_LDFLAGS_NOOPT := /DLL /EXPORT:main $(NO_STDLIBS) /NOLOGO /INCREMENTAL:NO /IGNORE:4210 /IGNORE:4049 /FORCE:MULTIPLE 
# Assume options /DYNAMICBASE and /NXCOMPAT are accepted by all supported Windows linkers.
TOOL_LDFLAGS_NOOPT += /DYNAMICBASE /NXCOMPAT
SATOOL_LDFLAGS_NOOPT :=
DLL_LDFLAGS := /DLL

# Flags to link an exe file from a single asm file with main() function as entry point.
APP_LDFLAGS_LINK_ASM := /link /defaultlib:kernel32.lib /defaultlib:user32.lib /entry:main

###### Debugging and optimizations ######

## Utility variables "internal" to this file

# The following variables depend on the user-defined DEBUG variable.
# If DEBUG=1 was specified, no optimizations will be applied and debug
# information will be generated. Otherwise, full optimization will be
# performed and debug information will not be generated.

ifeq ($(DEBUG),1)
    APP_OPT_CXX := /Od
    APP_OPT_LD :=
    TOOL_OPT_CXX := /Od
    TOOL_OPT_LD :=
    # Note: DBG_INFO_CXX is intentionally defined with deferred expansion.
    DBG_INFO_CXX = /Zi /Fd$(@:%=%$(DBG_SUFFIX))
    DBG_INFO_LD := /DEBUG
else
    APP_OPT_CXX := /O2
    APP_OPT_LD := /OPT:REF
    TOOL_OPT_CXX := /O2
    TOOL_OPT_LD := /OPT:REF
    DBG_INFO_CXX :=
    DBG_INFO_LD :=
endif

## Debugging flags to be used in any makefile.rules file

# The following variables do not depend on the user-defined DEBUG
# variable. When they are used, debug information will always be
# generated.
# Note: DBG_INFO_CXX_ALWAYS is intentionally defined with deferred expansion.
DBG_INFO_CXX_ALWAYS = /Zi /Fd$(@:%=%$(DBG_SUFFIX))
DBG_INFO_LD_ALWAYS := /DEBUG

###### Additional flags depending on directory structure ######

ifeq ($(KIT),1)
    # In the kit tree, the default Pin root is the kit root.
    # However, don't overwrite a user-defined PIN_ROOT definition (if it exists)
    PIN_ROOT ?= ../../..
    XED_ROOT := $(PIN_ROOT)/extras/xed-$(TARGET)
    TOOLS_ROOT := $(PIN_ROOT)/source/tools
    
    COMPONENT_INCLUDES := /I$(PIN_ROOT)/extras/components/include
    TOOL_INCLUDES += /I$(PIN_ROOT)/source/include/pin \
                     /I$(PIN_ROOT)/source/include/pin/gen

    TOOL_INCLUDES += -I$(PIN_ROOT)/extras/stlport/include \
                     -I$(PIN_ROOT)/extras \
                     -I$(PIN_ROOT)/extras/libstdc++/include \
                     -I$(PIN_ROOT)/extras/crt/include \
                     -I$(PIN_ROOT)/extras/crt \
                     -I$(PIN_ROOT)/extras/crt/include/arch-$(BIONIC_ARCH) \
                     -I$(PIN_ROOT)/extras/crt/include/kernel/uapi \
                     -I$(PIN_ROOT)/extras/crt/include/kernel/uapi/asm-x86 \
                     /FIinclude/msvc_compat.h
                         
    APP_LPATHS += /LIBPATH:$(PIN_ROOT)/extras/components/lib/$(TARGET)
    TOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib \
                   /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib-ext \
                   /LIBPATH:$(PIN_ROOT)/$(TARGET)/runtime/pincrt
    SATOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib \
                     /LIBPATH:$(PIN_ROOT)/$(TARGET)/lib-ext \
                     /LIBPATH:$(PIN_ROOT)/$(TARGET)/runtime/pincrt

    TOOL_LDFLAGS_NOOPT += $(PIN_ROOT)/$(TARGET)/runtime/pincrt/crtbeginS.obj
    SATOOL_LDFLAGS_NOOPT += /IGNORE:4049 $(PIN_ROOT)/$(TARGET)/runtime/pincrt/crtbegin.obj
        
    PIN := $(PIN_ROOT)/pin
    PINBIN := $(PIN_ROOT)/$(TARGET)/bin/pin$(EXE_SUFFIX)
    PIN32 := $(PIN_ROOT)/ia32/bin/pin$(EXE_SUFFIX)
    PIN64 := $(PIN_ROOT)/intel64/bin/pin$(EXE_SUFFIX)
else
    PIN_ROOT := ../..
    XED_ROOT := $(PIN_ROOT)/build/Source/xed/xed-$(COMPILER)-pin-$(TARGET_OS)-$(TARGET)/xed-kit
    TOOLS_ROOT := $(PIN_ROOT)/PinTools

	COMPONENT_INCLUDES := /I$(PIN_ROOT)/Source/atomic/00-export-include \
                          /I$(PIN_ROOT)/Source/sync/00-export-include \
                          /I$(PIN_ROOT)/Source/util/00-export-include
    TOOL_INCLUDES += /I$(TOOLS_ROOT)/Include \
                     /I$(PIN_ROOT)/build/Source/pin/internal-include-$(TARGET_OS)-$(TARGET) \
                     /I$(PIN_ROOT)/Source/bionic/stlport/stlport \
                     /I$(PIN_ROOT)/Source/bionic \
                     /I$(PIN_ROOT)/Source/bionic/libstdc++/include \
                     /I$(PIN_ROOT)/Source/bionic/libc/additional/windows \
                     /I$(PIN_ROOT)/Source/bionic/libc/additional/windows/include \
                     /I$(PIN_ROOT)/Source/bionic/libc/additional/include \
                     /I$(PIN_ROOT)/Source/bionic/libc/include \
                     /I$(PIN_ROOT)/Source/bionic/libc \
                     /I$(PIN_ROOT)/Source/bionic/libm/include \
                     /I$(PIN_ROOT)/Source/bionic/libm \
                     /I$(PIN_ROOT)/Source/bionic/libc/arch-$(BIONIC_ARCH)/include \
                     /I$(PIN_ROOT)/Source/bionic/libc/kernel/uapi \
                     /I$(PIN_ROOT)/Source/bionic/libc/kernel/uapi/asm-x86 \
                     /I$(PIN_ROOT)/Source/os-apis/00-export-include \
                     /I$(PIN_ROOT)/Source/asm/00-export-include \
                     /FIinclude/msvc_compat.h

    TOOL_LDFLAGS_NOOPT += $(PIN_ROOT)/build/Source/bionic/libc/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET)/crtbeginS.obj
    SATOOL_LDFLAGS_NOOPT += /IGNORE:4049 $(PIN_ROOT)/build/Source/bionic/libc/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET)/crtbegin.obj

    PINCRT_LIBPATH := $(PIN_ROOT)/build/Source/bionic/stlport/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET) \
                      $(PIN_ROOT)/build/Source/bionic/libm/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET) \
                      $(PIN_ROOT)/build/Source/bionic/libc/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET) \
                      $(PIN_ROOT)/build/Source/os-apis/export-$(TARGET_OS)-$(HOST_ARCH)-$(TARGET_OS)-$(TARGET)/$(TARGET)

    APP_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/internal-include-$(TARGET_OS)-$(TARGET)/lib
    TOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET) \
                   /LIBPATH:$(PIN_ROOT)/External/Ntdll/Lib_$(TARGET)_$(TARGET_OS) \
                   $(foreach dir,$(PINCRT_LIBPATH),/LIBPATH:$(dir))
    SATOOL_LPATHS += /LIBPATH:$(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET) \
                     /LIBPATH:$(PIN_ROOT)/External/Ntdll/Lib_$(TARGET)_$(TARGET_OS) \
                     $(foreach dir,$(PINCRT_LIBPATH),/LIBPATH:$(dir))

    PIN := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET)/pin$(EXE_SUFFIX)
    PINBIN := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-$(TARGET)/pin$(EXE_SUFFIX)
	PIN32 := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-ia32/pin$(EXE_SUFFIX)
	PIN64 := $(PIN_ROOT)/build/Source/pin/pin-$(TARGET_OS)-intel64/pin$(EXE_SUFFIX)
endif

TOOL_INCLUDES += $(COMPONENT_INCLUDES) \
                 /I$(XED_ROOT)/include/xed \
                 /I$(TOOLS_ROOT)/InstLib
APP_LPATHS += /LIBPATH:$(XED_ROOT)/lib
TOOL_LPATHS += /LIBPATH:$(XED_ROOT)/lib
SATOOL_LPATHS += /LIBPATH:$(XED_ROOT)/lib

###### Additional flags depending on the compiler ######

ifeq ($(ICC),1)
    CC := icl
    CXX := icl
    LINKER = xilink
    ifneq ($(CCOV),)
        TOOL_LIBS += libmmt.lib libipgo.lib libirc.lib svml_disp.lib
    endif
endif

ifeq ($(COMPILER),msvc)
    ifeq ($(VisualStudioVersion),14.0)
        # Suppress thread-safe local static initialization feature of C++ 11 using VS2015 compiler
        TOOL_CXXFLAGS_NOOPT += /Zc:threadSafeInit-
    else ifeq ($(VisualStudioVersion),15.0)
        # Suppress thread-safe local static initialization feature of C++ 11 using VS2017 compiler
        TOOL_CXXFLAGS_NOOPT += /Zc:threadSafeInit-
    endif
endif

###### Additional flags depending on architecture ######

ifeq ($(TARGET),ia32)
    APP_CXXFLAGS_NOOPT += /DTARGET_IA32 /DHOST_IA32 /DFUND_TC_TARGETCPU=FUND_CPU_IA32 /DFUND_TC_HOSTCPU=FUND_CPU_IA32
    TOOL_CXXFLAGS_NOOPT += /DTARGET_IA32 /DHOST_IA32
    ASM_FLAGS += /DTARGET_IA32
    TOOL_LDFLAGS_NOOPT += /MACHINE:x86 /ENTRY:Ptrace_DllMainCRTStartup@12 /BASE:0x55000000
    SSE2 := /arch:SSE2
    ifeq ($(ICC),1)
        TOOL_CXXFLAGS_NOOPT += /arch:IA32
    endif
endif

ifeq ($(TARGET),intel64)
    APP_CXXFLAGS_NOOPT += /DTARGET_IA32E /DHOST_IA32E /DFUND_TC_TARGETCPU=FUND_CPU_INTEL64 /DFUND_TC_HOSTCPU=FUND_CPU_INTEL64
    TOOL_CXXFLAGS_NOOPT += /DTARGET_IA32E /DHOST_IA32E
    ASM_FLAGS += /DTARGET_IA32E
    TOOL_LDFLAGS_NOOPT += /MACHINE:x64 /ENTRY:Ptrace_DllMainCRTStartup /BASE:0xC5000000
    NO_ASLR := /HIGHENTROPYVA:NO
endif

###### Finalize flags ######

## Compiler and linker flags

# Add the include paths to the compilation flags.
APP_CXXFLAGS_NOOPT += $(APP_INCLUDES)
TOOL_CXXFLAGS_NOOPT += $(TOOL_INCLUDES)
# MASM supports only 10 include directories so we have to be very picky...
ASM_FLAGS += /I$(TOOLS_ROOT)/InstLib

# Define the versions containing the full options
APP_CXXFLAGS := $(APP_CXXFLAGS_NOOPT) $(APP_OPT_CXX) $(DBG_INFO_CXX)
APP_LDFLAGS := $(APP_LDFLAGS_NOOPT) $(APP_OPT_LD) $(DBG_INFO_LD)
TOOL_CXXFLAGS := $(TOOL_CXXFLAGS_NOOPT) $(TOOL_OPT_CXX) $(DBG_INFO_CXX)
TOOL_CFLAGS := $(filter-out /GR-,$(TOOL_CXXFLAGS))
TOOL_LDFLAGS := $(TOOL_LDFLAGS_NOOPT) $(TOOL_OPT_LD) $(DBG_INFO_LD)
SATOOL_LDFLAGS := $(SATOOL_LDFLAGS_NOOPT) $(TOOL_OPT_LD) $(DBG_INFO_LD)
EXPORT_MAIN := /EXPORT:main
TOOL_LIBRARY_LDFLAGS_NOOPT := $(filter-out $(EXPORT_MAIN),$(TOOL_LDFLAGS_NOOPT))

# Add debugging flags to the NOOPT versions and disable optimizations
APP_CXXFLAGS_NOOPT += /Od $(DBG_INFO_CXX)
APP_LDFLAGS_NOOPT += /OPT:NOREF $(DBG_INFO_LD)
TOOL_CXXFLAGS_NOOPT += /Od $(DBG_INFO_CXX)
TOOL_LDFLAGS_NOOPT += /OPT:NOREF $(DBG_INFO_LD)

## Pin program finalization:

# Add any additional flags that the user specified to the Pin command line.
PIN += $(PIN_TESTFLAGS) $(PINFLAGS)

# Extracts the major and minor Windows version ID (e.g. for XP 64 bit it's 5.2.3790 --> 5, 2)
WIN_VER_MAJOR := $(shell echo $(shell cmd /c ver) | cut -f 2 -d "[" | cut -f 2 -d " " | cut -f 1 -d .)
WIN_VER_MINOR := $(shell echo $(shell cmd /c ver) | cut -f 2 -d "[" | cut -f 2 -d " " | cut -f 2 -d .)
export WIN_VER_MAJOR
export WIN_VER_MINOR
