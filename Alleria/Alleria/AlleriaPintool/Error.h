#ifndef ALLERIA_ERROR_H
#define ALLERIA_ERROR_H

#include "pin.H"
#include "PortableApi.h"
#include <fstream>
#include <ctime>

enum ALLERIA_ERROR
{
	ALLERIA_ERROR_SUCCESS,
	ALLERIA_ERROR_CONFIG_INVALID_FILE,
	ALLERIA_ERROR_CONFIG_UNSUPPORTED_VERSION,
	ALLERIA_ERROR_CONFIG_ON_REQUIRED_WITH_REOPENABLE,
	ALLERIA_ERROR_CONFIG_PROFILE_DOES_NOT_EXIST,
	ALLERIA_ERROR_CONFIG_UNKOWN_EVENT,
	ALLERIA_ERROR_CONFIG_PROFILE_PROCESS_DOES_NOT_EXIST,
	ALLERIA_ERROR_CONFIG_PROFILE_THREAD_DOES_NOT_EXIST,
	ALLERIA_ERROR_CONFIG_PROFILE_IMAGE_DOES_NOT_EXIST,
	ALLERIA_ERROR_CONFIG_PROFILE_FUNCTION_DOES_NOT_EXIST,
	ALLERIA_ERROR_CONFIG_PROFILE_INVALID_PROFILE,
	ALLERIA_ERROR_CANNOT_CREATE_PROFILE,
	ALLERIA_ERROR_INIT_FAILED,
	ALLERIA_ERROR_OUT_OF_MEMORY,
	ALLERIA_ERROR_THREAD_TERMINATION_FAILED,
	ALLERIA_ERROR_KNOB_NumKBInMemRefBuffer,
	ALLERIA_ERROR_KNOB_NumKBInInsRecordBuffer,
	ALLERIA_ERROR_KNOB_NumBuffersPerAppThread,
	ALLERIA_ERROR_KNOB_AsmStyle,
	ALLERIA_ERROR_KNOB_OutputFormat,
	ALLERIA_ERROR_KNOB_TimerFreq,
	ALLERIA_ERROR_KNOB_V2PTransMode,
	ALLERIA_ERROR_KNOB_ElevationRequired,
	ALLERIA_ERROR_KNOB_DRIVER_FAILED,
	ALLERIA_ERROR_KNOB_OutputDebugStringMode,
	ALLERIA_ERROR_KNOB_BufferSizeTooSmall,
	ALLERIA_ERROR_KNOB_TimerRequired,
	ALLERIA_ERROR_KNOB_TUNER_NO_TXT
};

extern ALLERIA_ERROR lastError;

void AlleriaSetLastError(ALLERIA_ERROR e);

ALLERIA_ERROR AlleriaGetLastError();

const char *AlleriaGetError(ALLERIA_ERROR e);

#define ERROR_TYPE_OFFSET 1000

// Writes an error message, if possible, and terminates the process.
void ALLERIA_WriteError(ALLERIA_ERROR e);

PMUTEX AcquireAccessToLogFile();
void ReleaseAccesstoLogFile(PMUTEX mutex);

enum ALLERIA_REPORT_TYPE
{
	ALLERIA_REPORT_FINALIZING,
	ALLERIA_REPORT_EXITING,
	ALLERIA_REPORT_WAIT_FOR_CHILD,
	ALLERIA_REPORT_WAIT_FOR_CHILD_SUCCESS,
	ALLERIA_REPORT_WAIT_FOR_CHILD_FAILURE,
	ALLERIA_REPORT_RUNTIME_HEAP_LOST_TRACK,
	ALLERIA_REPORT_XSAVE_UNKOWN_STATE,
	ALLERIA_REPORT_ON_EVENT_TRIGGERED,
	ALLERIA_REPORT_TILL_EVENT_TRIGGERED,
	ALLERIA_REPORT_STATS,
	ALLERIA_REPORT_INIT,
	ALLERIA_REPORT_APP_START,
	ALLERIA_REPORT_V2P,
	ALLERIA_REPORT_INTERNAL_EXCEPTION,
	ALLERIA_REPORT_CONTEXT_CHANGED,
	ALLERIA_REPORT_TUNER_CREATE,
	ALLERIA_REPORT_TUNER_PHASE_CHANGE,
	ALLERIA_REPORT_TUNER_SUSPEND,
	ALLERIA_REPORT_TUNER_RESUME
};

const char *AlleriaGetReportMessage(ALLERIA_REPORT_TYPE r);

void ALLERIA_WriteMessageEx(ALLERIA_REPORT_TYPE r, const char* msg);
void ALLERIA_WriteMessage(ALLERIA_REPORT_TYPE r);

#define ALLERIA_LOG_FILE_NAME "alleria.log"
#define ALLERIA_LOG_FILE_MUTEX_NAME "AlleriaLogFileMutex"

extern BOOL g_isFaulty;

#endif /* ALLERIA_ERROR_H */